================================================================================
학습 트래커 PWA 자동 생성 시스템 기획안
================================================================================
작성일: 2025-10-05
목적: 다양한 학습 주제로 동일한 구조의 PWA 프로젝트를 자동 생성

================================================================================
📊 현재 프로젝트 구조 분석
================================================================================

핵심 파일들:
  - src/data/frameworkData.js
    → 학습 콘텐츠 데이터 (유일하게 변경되는 부분)

  - src/App.jsx
    → UI 컴포넌트 (100% 재사용 가능)

  - vite.config.js
    → 프로젝트별 설정 (name, base URL, scope, start_url)

  - package.json
    → 프로젝트 메타데이터 (name)

  - .github/workflows/deploy.yml
    → 자동 배포 (동일)

  - public/
    → PWA 아이콘들 (재사용 가능)

변경 불필요한 부분:
  ✓ React UI 컴포넌트 (재사용)
  ✓ localStorage 로직 (데이터 구조만 맞으면 작동)
  ✓ GitHub Actions 워크플로우 (동일)
  ✓ Tailwind CSS 스타일링 (동일)

================================================================================
🎯 자동화 방안 3가지
================================================================================

─────────────────────────────────────────────────────────────────────────────
방안 1: CLI 생성기 (추천) ⭐
─────────────────────────────────────────────────────────────────────────────
개요:
  Node.js CLI 도구를 만들어 Markdown → PWA 프로젝트 자동 생성

장점:
  ✓ 한 번 명령어 실행으로 완성
  ✓ 다양한 학습 주제에 즉시 적용 가능
  ✓ Git 템플릿 기반으로 빠른 생성
  ✓ 반복 작업 최소화

사용 예시:
  $ npx create-learning-tracker my-topic

  질문:
    ? 학습 주제 이름? (예: "Kubernetes 학습")
    ? GitHub 저장소 이름? (예: "k8s-learning")
    ? eduFramework.md 경로? (예: "./k8s-framework.md")
    ? GitHub 저장소 자동 생성? (Yes/No)

  결과:
    ✅ 프로젝트 생성 완료!
    ✅ GitHub 저장소 생성 완료!
    ✅ GitHub Pages 배포 완료!
    🌐 https://jaehofromkorea.github.io/k8s-learning

구현 파일:
  generator/
    ├── cli.js              # CLI 인터페이스 (inquirer)
    ├── parser.js           # Markdown → frameworkData.js 변환
    ├── replacer.js         # 프로젝트명/base URL 자동 교체
    └── template/           # 템플릿 프로젝트 (현재 구조 복사)

예상 소요 시간:
  - 기본 버전 (Markdown 파싱 제외): 1시간
  - Markdown 파싱 포함: 2-3시간
  - GitHub 연동 포함: 4-5시간

─────────────────────────────────────────────────────────────────────────────
방안 2: AI Prompt 템플릿
─────────────────────────────────────────────────────────────────────────────
개요:
  Claude에게 제공할 표준화된 프롬프트 생성

장점:
  ✓ 추가 개발 불필요
  ✓ 유연성 높음
  ✓ 프롬프트만 저장하면 됨
  ✓ 즉시 사용 가능

사용 예시:
  prompt-template.md 파일에 다음 내용 저장:

  ─────────────────────────────────────────────────────────
  아래 eduFramework.md 내용을 기반으로
  학습 트래커 PWA 프로젝트를 생성해줘:

  **프로젝트 설정:**
  - 이름: {{TOPIC_NAME}}
  - 저장소: {{REPO_NAME}}
  - 설명: {{DESCRIPTION}}

  **템플릿:**
  [현재 cms-learning-tracker-pwa 구조 전체 첨부]

  **eduFramework.md:**
  [사용자 제공 마크다운]
  ─────────────────────────────────────────────────────────

단점:
  ✗ 매번 Claude에게 요청해야 함
  ✗ 일관성 보장 어려움
  ✗ 대량 생성 시 비효율적

─────────────────────────────────────────────────────────────────────────────
방안 3: GitHub Template Repository
─────────────────────────────────────────────────────────────────────────────
개요:
  GitHub에 템플릿 저장소를 만들고, "Use this template" 버튼으로 복사

장점:
  ✓ GitHub 네이티브 기능 활용
  ✓ 버전 관리 자동화
  ✓ 협업 용이
  ✓ 별도 개발 불필요

구조:
  1. learning-tracker-template 저장소 생성
  2. frameworkData.js를 비워두고 주석으로 설명 작성
  3. config.json에 커스터마이징 포인트 정리
  4. README.md에 사용법 작성

사용 절차:
  1. GitHub에서 "Use this template" 클릭
  2. 새 저장소 이름 입력
  3. src/data/frameworkData.js 수동 작성
  4. vite.config.js 설정 수정
  5. Git push → 자동 배포

단점:
  ✗ frameworkData.js는 여전히 수동 작성
  ✗ 설정 파일들 수동 수정 필요

================================================================================
🚀 추천 구현 계획 (방안 1: CLI 생성기)
================================================================================

Phase 1: 템플릿 구조화 (30분)
  1. 현재 프로젝트를 template/ 폴더로 복사
  2. 변경 가능한 부분을 플레이스홀더로 교체:
     - package.json: "name": "{{PROJECT_NAME}}"
     - vite.config.js: base: '/{{REPO_PATH}}/'
     - vite.config.js: name: '{{APP_NAME}}'
     - vite.config.js: description: '{{DESCRIPTION}}'

Phase 2: Markdown 파서 개발 (1-2시간)
  파일: parser.js

  기능:
    - eduFramework.md 읽기
    - Tier 구조 파싱 (정규식)
    - 각 토픽의 beginner/intermediate/advanced 추출
    - frameworkData.js 형식으로 변환

  핵심 로직:
    function parseEduFramework(markdownContent) {
      const tierPattern = /^## Tier (\d+):/gm;
      const topicPattern = /^### (\d+-\d+)\. (.+)/gm;

      // Tier별로 파싱
      // 각 토픽 추출
      // JSON 객체로 변환

      return frameworkDataObject;
    }

Phase 3: CLI 개발 (1시간)
  파일: cli.js

  dependencies:
    - commander: CLI 프레임워크
    - inquirer: 대화형 프롬프트
    - fs-extra: 파일 복사/수정
    - chalk: 색상 출력

  기능:
    1. 사용자 입력 받기
    2. Markdown 파일 읽기
    3. 파싱 + 변환
    4. 템플릿 복사 + 치환
    5. Git 초기화 (선택)
    6. npm install 자동 실행

  코드 예시:
    const answers = await inquirer.prompt([
      {
        type: 'input',
        name: 'projectName',
        message: '프로젝트 이름을 입력하세요:',
        default: 'my-learning-tracker'
      },
      {
        type: 'input',
        name: 'repoPath',
        message: 'GitHub 저장소 경로 (예: my-repo):',
      },
      {
        type: 'input',
        name: 'mdPath',
        message: 'eduFramework.md 파일 경로:',
        default: './eduFramework.md'
      }
    ]);

Phase 4: 배포 자동화 (선택, 1-2시간)
  dependencies:
    - @octokit/rest: GitHub API

  기능:
    - GitHub API로 저장소 자동 생성
    - 초기 커밋 + 푸시
    - GitHub Pages 자동 활성화

  코드 예시:
    const octokit = new Octokit({ auth: GITHUB_TOKEN });

    await octokit.repos.createForAuthenticatedUser({
      name: repoName,
      description: description,
      homepage: `https://${username}.github.io/${repoName}`,
      auto_init: false
    });

================================================================================
💡 즉시 사용 가능한 임시 방법 (개발 전)
================================================================================

지금 당장 새 프로젝트를 만들어야 한다면:

단계:
  1. 현재 프로젝트 폴더 전체 복사
     $ cp -r cms-learning-tracker-pwa new-topic-tracker

  2. 수정할 파일들:
     - package.json
       → "name": "new-topic-tracker"

     - vite.config.js
       → base: '/new-topic/'
       → name: '새 주제 학습 트래커'
       → description: '...'
       → scope: '/new-topic/'
       → start_url: '/new-topic/'

     - src/data/frameworkData.js
       → 전체 내용 교체

  3. Claude에게 요청:
     "이 eduFramework.md를 frameworkData.js 형식으로 변환해줘"

  4. Git 초기화 및 배포:
     $ cd new-topic-tracker
     $ git init
     $ git add .
     $ git commit -m "Initial commit"
     $ git remote add origin https://github.com/username/new-topic.git
     $ git push -u origin main

소요 시간: 5-10분

장점:
  ✓ 즉시 사용 가능
  ✓ 추가 개발 불필요

단점:
  ✗ 수동 작업 필요
  ✗ 실수 가능성
  ✗ 반복 시 비효율

================================================================================
📋 최소 구현 버전 (MVP) 코드 스케치
================================================================================

create-learning-tracker.js (전체 ~100줄):

  #!/usr/bin/env node
  const fs = require('fs-extra');
  const path = require('path');
  const inquirer = require('inquirer');

  async function main() {
    console.log('🚀 학습 트래커 PWA 생성기\n');

    // 1. 사용자 입력
    const answers = await inquirer.prompt([
      {
        type: 'input',
        name: 'projectName',
        message: '프로젝트 이름:',
        default: 'my-learning-tracker'
      },
      {
        type: 'input',
        name: 'repoPath',
        message: 'GitHub 저장소 경로:',
        validate: (input) => input.length > 0
      },
      {
        type: 'input',
        name: 'appName',
        message: '앱 이름 (PWA에 표시됨):',
        default: '학습 트래커'
      },
      {
        type: 'input',
        name: 'description',
        message: '앱 설명:',
      }
    ]);

    const targetPath = path.join(process.cwd(), answers.projectName);

    // 2. 템플릿 복사
    console.log('\n📦 프로젝트 생성 중...');
    fs.copySync(path.join(__dirname, 'template'), targetPath);

    // 3. 설정 파일 수정
    console.log('⚙️  설정 파일 업데이트 중...');

    replaceInFile(
      path.join(targetPath, 'package.json'),
      {
        '{{PROJECT_NAME}}': answers.projectName
      }
    );

    replaceInFile(
      path.join(targetPath, 'vite.config.js'),
      {
        '{{REPO_PATH}}': answers.repoPath,
        '{{APP_NAME}}': answers.appName,
        '{{DESCRIPTION}}': answers.description
      }
    );

    console.log('\n✅ 프로젝트 생성 완료!');
    console.log(`📁 위치: ${targetPath}`);
    console.log('\n📝 다음 단계:');
    console.log(`  1. cd ${answers.projectName}`);
    console.log('  2. src/data/frameworkData.js 파일 수정');
    console.log('  3. npm install');
    console.log('  4. npm run dev');
  }

  function replaceInFile(filePath, replacements) {
    let content = fs.readFileSync(filePath, 'utf8');

    for (const [key, value] of Object.entries(replacements)) {
      content = content.replace(new RegExp(key, 'g'), value);
    }

    fs.writeFileSync(filePath, content);
  }

  main().catch(console.error);

================================================================================
🔄 더 쉬운 대안: Markdown 변환기만
================================================================================

convert-md-to-data.js (~50줄):

  #!/usr/bin/env node
  const fs = require('fs');
  const marked = require('marked');

  function convertMarkdownToFrameworkData(mdPath) {
    const content = fs.readFileSync(mdPath, 'utf8');

    // Markdown 파싱 로직
    // (정규식으로 Tier, Topic 추출)

    const frameworkData = {
      tiers: [
        // 파싱된 데이터
      ]
    };

    // frameworkData.js 형식으로 출력
    console.log('export const frameworkData = ');
    console.log(JSON.stringify(frameworkData, null, 2));
    console.log(';');
  }

  const mdPath = process.argv[2];
  if (!mdPath) {
    console.error('Usage: node convert-md-to-data.js <markdown-file>');
    process.exit(1);
  }

  convertMarkdownToFrameworkData(mdPath);

사용법:
  $ node convert-md-to-data.js my-framework.md > src/data/frameworkData.js

소요 시간: 30분 개발

================================================================================
🎯 의사결정 가이드
================================================================================

상황별 추천:

┌─────────────────────────────────────────────────────────────────────────┐
│ 프로젝트 개수      │ 추천 방법                    │ 소요 시간        │
├─────────────────────────────────────────────────────────────────────────┤
│ 1-2개              │ 수동 복사 + Claude 변환      │ 5분/개           │
│ 3-5개              │ Markdown 변환기              │ 30분 개발 + 2분/개│
│ 6-10개             │ 기본 CLI 생성기              │ 2시간 개발 + 1분/개│
│ 10개 이상          │ 완전 자동 CLI (GitHub 연동)  │ 5시간 개발 + 1분/개│
└─────────────────────────────────────────────────────────────────────────┘

우선순위:
  1. 서비스 고도화 먼저 (현재 단계) ⭐
  2. 기능 안정화 후 CLI 개발
  3. 실제 사용 경험 기반으로 최적화

================================================================================
📌 TODO (나중에)
================================================================================

□ 서비스 고도화 완료 후 CLI 개발 시작
□ template/ 폴더 구조 정리
□ Markdown 파서 개발
□ CLI 인터페이스 개발
□ 테스트 및 문서화
□ npm publish (선택)

================================================================================
📎 참고 자료
================================================================================

필요한 라이브러리:
  - commander: CLI 프레임워크
  - inquirer: 대화형 프롬프트
  - fs-extra: 파일 시스템 유틸리티
  - chalk: 터미널 색상
  - marked: Markdown 파서
  - @octokit/rest: GitHub API (선택)

학습 자료:
  - https://github.com/tj/commander.js
  - https://github.com/SBoudrias/Inquirer.js
  - https://docs.github.com/en/rest

유사 프로젝트:
  - create-react-app
  - create-vite
  - create-next-app

================================================================================
끝
================================================================================
